<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-07-30T06:53:54-04:00</updated><id>http://localhost:4000/feed.xml</id><subtitle>&quot;Electronics, Microcontrollers, FPGAs, Embedded, Linux, Software, horrible projects that deserve to be thrown into oblivion. Just your everyday idiot who enjoys taking things apart, and maybe someday I'll learn how to put them back together&quot;</subtitle><entry><title type="html">Peripheral Basics</title><link href="http://localhost:4000/tutorials/peripheral_basics.html" rel="alternate" type="text/html" title="Peripheral Basics" /><published>2021-07-27T22:41:46-04:00</published><updated>2021-07-27T22:41:46-04:00</updated><id>http://localhost:4000/tutorials/peripheral_basics</id><content type="html" xml:base="http://localhost:4000/tutorials/peripheral_basics.html">&lt;hr /&gt;

&lt;h1 id=&quot;what-are-peripherals&quot;&gt;What Are Peripherals&lt;/h1&gt;
&lt;p&gt;At a low level, peripherals are anything that interact with a computer to either give it information or send out information. This information can be pretty much anything.&lt;/p&gt;

&lt;p&gt;A mouse is a peripheral that inputs the X and Y movement you make, and your computer uses that peripheral to determine where you want your cursor to appear on the screen. Another example would be a temperature sensor that communicates over I2C (pronounced I squared C).&lt;/p&gt;

&lt;p&gt;Peripherals can be communicated with via numerous protocols, but we’re only going to cover a few basic types of peripherals and protocols here.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;gpio-inputs&quot;&gt;GPIO Inputs&lt;/h1&gt;
&lt;p&gt;This is the most basic type of peripheral you can attach to a processor. The pins either read the voltage on the line, or they write a voltage to the line. The voltage is digital, meaning it can only be on or off at the specific device’s voltage.&lt;/p&gt;

&lt;p&gt;Inputs can have numerous configurations such as high impedance, pull-up, pull-down, or floating. These dictate the standard state of the pin. Pull up means the pin is typically high, while pull down means the pin is typically low. High impedance effectively places an infinite resistor in series, while floating means the pin can do anything.
&lt;img src=&quot;/assets/images/posts/tutorials/peripheral_basics/pull_up_pull_down.png&quot; alt=&quot;Pull Up Pull Down Example&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;gpio-outputs&quot;&gt;GPIO Outputs&lt;/h1&gt;
&lt;p&gt;Outputs have numerous configurations as well, such as push-pull, open-drain, and open-collector.&lt;/p&gt;

&lt;p&gt;push-pull pins are capable of both sourcing and sinking current to create the desired output due to their structure shown below. Open-Drain pins are only capable of sinking current and rely on external pullups to set the voltage on the pin. This is shown below as well.
&lt;img src=&quot;/assets/images/posts/tutorials/peripheral_basics/open_drain_push_pull.png&quot; alt=&quot;Open Drain and Push Pull GPIO Configurations&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open Collector is effectively the same thing as open drain except it uses a BJT rather than a FET, as shown below.
&lt;img src=&quot;/assets/images/posts/tutorials/peripheral_basics/open_collector.png&quot; alt=&quot;Open Collector GPIO Configuration&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;adcs&quot;&gt;ADCs&lt;/h1&gt;
&lt;p&gt;Analog to Digital Converters(ADCs) change a message in the Analog domain into a message that can be processed in the Digital domain. They offer N bits of precision over a voltage range V. If you divide that voltage V by the N bits you receive the resolution of your ADC. Converting Analog signals to the Digital domain is a vital part of modern day signal processing.&lt;/p&gt;

&lt;p&gt;Here is an example of what an ADC looks like under the hood at a basic level&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/tutorials/peripheral_basics/adc.png&quot; alt=&quot;Discreet Analog to Digital Converter&quot; width=&quot;700&quot; /&gt;
You can see that there are 8 comparators. This means we can measure 8 bits separately. 8 is 2^3 which means by using an encoder we can measure an Analog signal with 8 bits of accuracy, and only need to read three lines.&lt;/p&gt;

&lt;p&gt;If Vref in this scenario was +5V, we would have 5 V / 8 Bits therefore each bit would have a resolution of ~625mV.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;dacs&quot;&gt;DACs&lt;/h1&gt;
&lt;p&gt;Digital to Analog Converters(DACs) are the matching pair to your ADCs. Much like we need to convert Analog Signals to Digital Signals, we must do the opposite as well. The music coming from your phone is stored digitally, but eventually the sound played via a speaker must be an Analog waveform.&lt;/p&gt;

&lt;p&gt;DACs have the same principle of a reference voltage V, N bits, and a resolution. An Example DAC is shown below.
&lt;img src=&quot;/assets/images/posts/tutorials/peripheral_basics/dac.png&quot; alt=&quot;Discreet Digital to Analog Converter&quot; width=&quot;700&quot; /&gt;
In this example you can see that each bit has a resistor that is double the value of the previous bit in series with the digital line. This means that by setting each individual bit high you can push a proportionate amount of current through the pin, and with the op amp acting inverting amplifier you can effectively translate the digital signals into a known analog signal with a known resolution.&lt;/p&gt;

&lt;p&gt;The resolution in this case if the voltage was +5V would be +5V / 4 Bits = 1.25 V. Note the output would be inverted though.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;There are resistor to resistor DACs as well that are often utilized. Example below.
&lt;img src=&quot;/assets/images/posts/tutorials/peripheral_basics/dac_r2r.png&quot; alt=&quot;Discreet Digital to Analog Converter R2R&quot; width=&quot;700&quot; /&gt;
This is useful when you can fit more resistors, and you don’t need the op amp to drive the load.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;i2c&quot;&gt;I2C&lt;/h1&gt;
&lt;p&gt;I2C (I-Squared-C) is a data transfer/protocol rather than a peripheral itself. Think as a method of delivering a message to a peripheral and telling it what you need to do. I2C is a two wire synchronous protocol.
&lt;img src=&quot;/assets/images/posts/tutorials/peripheral_basics/i2c_overview.png&quot; alt=&quot;I2C Overview&quot; width=&quot;700&quot; /&gt;
I2C allows a master device (like your microcontroller or CPU) to communicate with numerous slave devices(like sensors, drivers, other microcontrollers, etc.)&lt;/p&gt;

&lt;p&gt;The first wire is Serial Clock (SCL). This wire sets the clock speed for the I2C bus, and it’s frequency will depend upon the specific peripheral you’re using. Common frequencies are 100 kHz and 400 kHz.&lt;/p&gt;

&lt;p&gt;The second wire is Serial Data (SDA). This wire is used to send all the data between two devices. We’ll go ever an example waveform and how you’d use this protocol below&lt;/p&gt;

&lt;p&gt;Each wire requires a pullup resistor because internally the pins are open-collector/open-drain configuration. The value of resistor you chose depends upon the length of the line, and the frequency at which you communicate, but typically 4.7k works fine.&lt;/p&gt;

&lt;p&gt;Next up we’ll discuss the message window and how the data is formatted.
&lt;img src=&quot;/assets/images/posts/tutorials/peripheral_basics/i2c_waveform.png&quot; alt=&quot;I2C Waveform&quot; width=&quot;700&quot; /&gt;
&lt;strong&gt;&lt;em&gt;Start Bit&lt;/em&gt;&lt;/strong&gt;
First, SDA is pulled low while SCL remains high. This indicates that the bus is going to be used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Address&lt;/em&gt;&lt;/strong&gt;
This indicates the address to which the master will be writing. This is an 7 Bit message that is sent Most Significant Bit(MSB) First. The address of the slave device is given in the device’s data sheet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Read/Write Bit&lt;/em&gt;&lt;/strong&gt;
The 8th bit of the message determines whether the master will be reading or writing from the slave device specified at the address. 0 is a write operation, 1 is a read operation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Acknowledge&lt;/em&gt;&lt;/strong&gt;
To show that the slave device successfully received the message, an acknowledgement(ACK) bit is sent on SCL. This is the 9th Bit.&lt;/p&gt;

&lt;p&gt;If ACK is low that means the slave successfully received the message, and if it is high then the transfer failed, the communication ends, and the master is free to react to that failure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Data Frame&lt;/em&gt;&lt;/strong&gt;
Assuming the ACK bit was low, then the master will continue creating a constant clock signal on SCK until it has received or written everything it needs. Master or Slave will continue reading/writing until the master determines that the transfer is done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Stop Condition&lt;/em&gt;&lt;/strong&gt;
The transfer stops when the Master pulls SDA high while SCL is already high. You don’t modify SDA while SCL is high unless you intend to stop the transfer.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;spi&quot;&gt;SPI&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h1&gt;</content><author><name></name></author><category term="tutorials" /><summary type="html"></summary></entry><entry><title type="html">Linux Basics</title><link href="http://localhost:4000/tutorials/linux_basics.html" rel="alternate" type="text/html" title="Linux Basics" /><published>2021-07-26T22:41:46-04:00</published><updated>2021-07-26T22:41:46-04:00</updated><id>http://localhost:4000/tutorials/linux_basics</id><content type="html" xml:base="http://localhost:4000/tutorials/linux_basics.html">&lt;hr /&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;USB Drive - 4 GB or Greater (&lt;strong&gt;&lt;em&gt;Note - Everything on this will be deleted!&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;USB Port on your computer (Duh)&lt;/li&gt;
  &lt;li&gt;At least 25 GB of Storage free on your hard drive (I strongly recommend using 100 GB so you never need to think of it again if you have the space.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: This tutorial is meant for Computers that run Windows. If you are using a Mac, first off I recommend you don’t their hardware is overpriced and horrible and their OS is worse than Windows. Secondly, this guide will not help you.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;starting-out&quot;&gt;Starting Out&lt;/h1&gt;

&lt;p&gt;The first step in installing Linux onto your machine is determining which distribution you want to use. Think of Operating Systems as makes of car, and distributions as specific models of car. Windows is an operating system, but there are multiple versions(XP, Vista, 7, We don’t talk about 8, 10).&lt;/p&gt;

&lt;p&gt;Linux is the overarching operating system, but under that operating system you can choose your flavor. Sites like &lt;a href=&quot;https://distrowatch.com/&quot;&gt;distrowatch&lt;/a&gt; will show you every new and trending distro, and it will have comparisons and news about each.&lt;/p&gt;

&lt;p&gt;For our sake, we’ll be using Ubuntu 20.04 LTS. This is the most recent release of Ubuntu, on of the primary Linux distributions out there. 99% software that runs on linux will run successfully on Ubuntu.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;creating-a-boot-drive&quot;&gt;Creating a Boot Drive&lt;/h1&gt;

&lt;p&gt;Let’s get our boot USB created. We’re going to need to donwload the &lt;a href=&quot;https://ubuntu.com/download/desktop&quot;&gt;Ubuntu 20.04 Desktop&lt;/a&gt; ISO file from that page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/tutorials/linux_basics/ubuntu_download_screenshot.png&quot; alt=&quot;Ubuntu Download Picture&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next up we’re going to need to download a tool called &lt;a href=&quot;https://rufus.ie/en_US/&quot;&gt;Rufus&lt;/a&gt; (aka the real hero of the Kim Possible series)
&lt;img src=&quot;/assets/images/posts/tutorials/linux_basics/rufus_download_screenshot.png&quot; alt=&quot;Rufus Download Picture&quot; width=&quot;700&quot; /&gt;
Download from the first link shown in the image&lt;/p&gt;

&lt;p&gt;Next up we’re going to need Rufus to burn an ISO onto the flash drive that we’ll be using to install Linux on our computer. Make sure you have atleast a 4 GB flashdrive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Again, everything on the flash drive will be deleted, so be careful if you have important files!&lt;/em&gt;&lt;/strong&gt;
&lt;img src=&quot;/assets/images/posts/tutorials/linux_basics/rufus_usage_screenshot.png&quot; alt=&quot;Rufus Usage Picture&quot; width=&quot;700&quot; /&gt;
Select your USB stick in the device panel. You can follow the setup shown in the above screenshot, except rather than select 18.04 select the Ubuntu 20.04 ISO you just downloaded. Once you’ve selected Ubuntu 20.04 LTS go ahead and hit start.&lt;/p&gt;

&lt;p&gt;Once Rufus is done we’re all set to install to our computer using the flash drive :)&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;installing-ubuntu&quot;&gt;Installing Ubuntu&lt;/h1&gt;

&lt;p&gt;Next up we’re going to have to configure our computers BIOS to boot from the USB drive rather than our current operating system that is installed on our hard drive. You access your BIOS when your computer first boots up before your operating system kicks in.&lt;/p&gt;

&lt;p&gt;Unfortunately the button to enter BIOS depends on which manufacturer created your motherboard. For me personally I repeatedly press the F2 key as my computer powers on. You’re going to have to search for yourself to see what the key to access your BIOS is.&lt;/p&gt;

&lt;p&gt;Once you’re in your BIOS menu, you’ll need to navigate to the boot order tab. Once in the boot order tab adjust it such that the first thing that boots is your Ubuntu 20.04 flash drive that you created.&lt;/p&gt;

&lt;p&gt;After you do this, save the bios configuration and continue. Your system should boot into the live image contained within the USB drive. It will look something like this
&lt;img src=&quot;/assets/images/posts/tutorials/linux_basics/ubuntu_install_select.png&quot; alt=&quot;Ubuntu Install Select&quot; width=&quot;700&quot; /&gt;
You can try the operating system without installing by clicking try. If you try it, you can chose to install from the desktop after. Once you’re ready to install move through the options.&lt;/p&gt;

&lt;p&gt;Once you reach the page asking about updates and other options shown here
&lt;img src=&quot;/assets/images/posts/tutorials/linux_basics/ubuntu_updates_software.png&quot; alt=&quot;Ubuntu Software and Upgrades&quot; width=&quot;700&quot; /&gt;
I Strongly recommend you do a normal installation, but if you are strapped for hard drive space you can do a minimal install. I’ve had issues with downloading updates while installing Ubuntu before so I actually recommend not doing this(We can upgrade later).&lt;/p&gt;

&lt;p&gt;The box that asks if you would like to install third party software needs to be checked off. This will ensure that things like graphic cards and Wi-Fi chips work properly. Make sure to check this off.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;seriously-read-this-closely&quot;&gt;Seriously, Read This Closely&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;In the next stage we’re going to choose our installation type. You’ll see a screen like this
&lt;img src=&quot;/assets/images/posts/tutorials/linux_basics/ubuntu_install_type.png&quot; alt=&quot;Ubuntu Install Type&quot; width=&quot;700&quot; /&gt;
If you have Windows on your machine, there will be an option to install Ubuntu alongside Windows.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Install Ubuntu alongside Windows&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;seriously-read-closely-im-not-responsible-if-you-brick-windows-install&quot;&gt;Seriously, Read Closely, I’m Not Responsible If You Brick Windows Install&lt;/h1&gt;
&lt;p&gt;Select install alongside Windows. This will automatically partition your hard drive so that both operating systems can exist alongside one another. If you select one of the other options you will likely break your Windows install (unless you know what you’re doing).&lt;/p&gt;

&lt;p&gt;On the next page you will have a menu where you can drag the divider to determine how much of your hard drive space you will give to Ubuntu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/tutorials/linux_basics/ubuntu_partition_size.png&quot; alt=&quot;Ubuntu Partition Type&quot; width=&quot;700&quot; /&gt;
Technically 10 GB is enough, I reccomend you use atleast 25 GB if you have the space, and in all honesty I would recommend 250 GB if you never want to worry about this again. As long as your hard drive has the space I recommend making a fairly large install partition.&lt;/p&gt;

&lt;p&gt;If you intend to develop for Xilinx FPGAs on your Linux machine you’ll need a huge amount of storage space for their IDE. I’m talking nearly 70 GB for that alone. You can thank Xilinx for making horrible software that is as bloated as that.&lt;/p&gt;

&lt;p&gt;Once you’ve determined a size that works for you, and does not interfere with the storage space you need for your Windows drive go ahead and click install now&lt;/p&gt;

&lt;p&gt;As long as the size you opted for work for you go ahead and hit continue once it asks if you would like to write changes to the disk. You’ve officially installed Linux :)&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;learning-linux&quot;&gt;Learning Linux&lt;/h1&gt;
&lt;p&gt;I’m going to be honest, I don’t have the time to write an entire Linux tutorial for you. I do have time to point you to
the best one I know of.&lt;/p&gt;

&lt;h1 id=&quot;linux-journey&quot;&gt;&lt;a href=&quot;https://linuxjourney.com/&quot;&gt;Linux Journey&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/posts/tutorials/linux_basics/linux_journey.png&quot; alt=&quot;Linux Journey Screenshot&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This site is a great guide to getting started with Linux. I highly recommend you do the entire command line section, text-fu section, and if you want to be able to argue with every other Linux user if Vim or Emacs is better, then I suggest you pick on of them to learn in the advanced text-fu section.&lt;/p&gt;

&lt;p&gt;I also highly recommend you check out the lesson on Packages. Ubuntu uses apt, and I recommend you do some reading on tar, gzip, and compiling from source in that chapter as well.&lt;/p&gt;

&lt;p&gt;Once you’ve got those down you should be all set to use Linux. There’s a lot more to learn along the way, but you’re off to a great start :)&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;quick-tips&quot;&gt;Quick Tips&lt;/h1&gt;
&lt;p&gt;Here are some simple things I want you to know about&lt;/p&gt;

&lt;p&gt;How to Update System&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How to see your IP Address&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#This shows the long version&lt;/span&gt;
ifconfig

&lt;span class=&quot;c&quot;&gt;#This shows the short version&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Terminator is a shell that allows you to open multiple within the same program. These shell sessions will share the variables that the initial shell had upon initialization&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;terminator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How to shorten commands&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#Bind some long command to a shorter command&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo print out a long statement that says all this just by typing lol into a shell&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dot files are hidden files in your system. You can see them by doing&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#You can edit them just the same as any other file&lt;/span&gt;
vim .bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Your bashrc is a shell script that is executed once your terminal is first opened. I often add alias links to the bottom of it like the example shown earlier, so I can work efficiently&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#~ is the symbol for your home directory in linux. This is the directory your shells initially open to&lt;/span&gt;
vim ~/.bashrc
&lt;span class=&quot;c&quot;&gt;#Just add anything you want to happen in all shell sessions such as aliases, etc. to end of the file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SSH is a command use to connect to remote Unix based machines&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#Use this to work on a machine besides your own&lt;/span&gt;
ssh username@ip_adress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Man is a command used to read the manual of another command&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#Read the manual for the program that gives you manuals&lt;/span&gt;
man man
&lt;span class=&quot;c&quot;&gt;#Read the manual for ssh&lt;/span&gt;
man ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="tutorials" /><summary type="html"></summary></entry><entry><title type="html">Starting with Raspberry Pi</title><link href="http://localhost:4000/tutorials/starting_with_raspberry_pi.html" rel="alternate" type="text/html" title="Starting with Raspberry Pi" /><published>2021-07-24T22:41:46-04:00</published><updated>2021-07-24T22:41:46-04:00</updated><id>http://localhost:4000/tutorials/starting_with_raspberry_pi</id><content type="html" xml:base="http://localhost:4000/tutorials/starting_with_raspberry_pi.html">&lt;hr /&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Basic knowledge of &lt;a href=&quot;https://linuxjourney.com/&quot;&gt;Linux&lt;/a&gt; (It’s possible to connect via windows but this tutorial assumes you’re working in a Linux environment)&lt;/li&gt;
  &lt;li&gt;Compatible &lt;a href=&quot;https://www.raspberrypi.org/products/&quot;&gt;Raspberry Pi&lt;/a&gt; Model (Most will work. This was tested with the Pi Zero, Pi Zero W, and the Pi 3)&lt;/li&gt;
  &lt;li&gt;MicroSD Card and method to program it&lt;/li&gt;
  &lt;li&gt;Cables/Power Supply for your Pi (USB for the Zero, Power Cable for all other models)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;starting-out&quot;&gt;Starting Out&lt;/h1&gt;

&lt;p&gt;This tutorial assumes you are working on a Linux machine. I highly encourage you dual-boot your machine if you ever intend to do any serious work in electronics. You’ll find that you pretty much need to have both Windows and Linux if you want to take advantage of all the modern tools. If you’re new I reccomend just going with &lt;a href=&quot;https://ubuntu.com/download/desktop&quot;&gt;Ubuntu&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Raspberry Pi that you purchased will be running Raspbian. This is a stripped down version of the Debian Linux distrobution(Ubuntu is based upon Debian as well). There are two versions of Raspian, Raspian Desktop, and Raspian Lite.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Raspian Desktop - Full Desktop Environment capable of running a monitor and doing things like browse the web and playing video.&lt;/li&gt;
  &lt;li&gt;Raspian Lite - Terminal only distrobution that doesn’t have bloat. This runs significantly faster and if you don’t need a monitor, this is what your system should use.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;installing-raspian&quot;&gt;Installing Raspian&lt;/h1&gt;
&lt;p&gt;There is a very simple tool for installing the Raspian image onto the SD card. Do the following command in your Linux terminal to install the package&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;snap &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;rpi-imager &lt;span class=&quot;nt&quot;&gt;--devmode&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# When that is done installing do the following command to launch the gui&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rpi-imager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ensure that you’re SD card is connected to your machine and go through the setup for your image.&lt;/p&gt;

&lt;p&gt;Chose OS -&amp;gt; Raspberry Pi OS(Other) -&amp;gt; Raspberry Pi OS (Lite)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/tutorials/starting_with_raspberry_pi/rpi_imager.png&quot; alt=&quot;RPI Imager&quot; width=&quot;700&quot; /&gt;
If you would like to install the full desktop suite opt for Raspberry Pi OS Full, but that is not the point of this tutorial. After your SD card is installed fully remove it and reinsert it into your computer. Two partitions should now appear in your system, Boot and RootFS. For our purposes we will only be touching the Boot partition.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;configuring-the-os&quot;&gt;Configuring the OS&lt;/h1&gt;
&lt;p&gt;All Pi’s will need the following steps to set them up.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;PATHTOBOOT/Boot

&lt;span class=&quot;c&quot;&gt;#This file enables ssh on the system&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that we need to do some configuration if your Pi has Wi-Fi. The only Pi I know that does not have Wi-Fi is the Pi Zero.
You’ll need to create the following file within the Boot partition and name it wpa_supplicant.conf&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=US

network={
    ssid=&quot;YOURSSID&quot;
    psk=&quot;YOURPASSWORD&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Wherein the ssid is the name of your Wi-Fi network, and psk is your password. The Quotes remain around the string. For me personally I had to add the following line due to how my Wi-Fi network handles its keys.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;network={
    ssid=&quot;YOURSSID&quot;
    psk=&quot;YOURPASSWORD&quot;
    key_mgmt=WPA-PSK
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/tutorials/starting_with_raspberry_pi/boot_partition.png&quot; alt=&quot;Boot Paritition Setup&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;todo-add-the-info-for-the-pi-zero-with-no-wi-fi&quot;&gt;TODO add the info for the Pi Zero with no Wi-Fi&lt;/h1&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;connecting-to-your-pi&quot;&gt;Connecting to Your Pi&lt;/h1&gt;
&lt;p&gt;Now that your pi is fully configured we’re going to connect to it via SSH. SSH is a method of logging into a different computer remotely. It’s extremely useful, and you’ll use it when logging into other computers on your network, or even when logging into remote servers that you may be using.&lt;/p&gt;

&lt;p&gt;This assumes you’re on the same Wi-Fi network as your Pi, or in the case of the Pi Zero (without Wi-Fi) that you’re connected to your computer via the USB Data Port.&lt;/p&gt;

&lt;p&gt;The Pi will take a minute or two to boot up and be accessible so after plugging it in give it a bit.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# If this shows that it is successfully receiving packets move forward with the next command&lt;/span&gt;
ping raspberrypi.local

&lt;span class=&quot;c&quot;&gt;# This should allow you to login if you could ping successfully&lt;/span&gt;
ssh pi@raspberrypi.local
&lt;span class=&quot;c&quot;&gt;# The password by default is raspberry&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this works successfully then you’ve successfully logged into your pi :)&lt;/p&gt;

&lt;p&gt;If this does not work we’re going to have to look for the IP ourselves. We’re going to need a tool called nmap.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nmap

&lt;span class=&quot;c&quot;&gt;#This gets your IP address&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Take the IP address that was outputted in the start by that and paste it in the place of the IP in&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#the following command&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sn&lt;/span&gt; 192.168.0.0/24
&lt;span class=&quot;c&quot;&gt;#sudo is required to see the manufacturer of each device on your network&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nmap will have a long list of devices on your network, and you should see one that has the Raspberry Pi Foundation as its creator. Take that IP address and run the following command.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#Replace the IP address here with the IP you found for your Pi&lt;/span&gt;
ssh pi@192.168.0.13
&lt;span class=&quot;c&quot;&gt;#The default password is raspberry&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/posts/tutorials/starting_with_raspberry_pi/ssh_success.png&quot; alt=&quot;SSH Success&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;after-logging-in&quot;&gt;After Logging In&lt;/h1&gt;
&lt;p&gt;Now that you’re in lets configure a few things. Run the following command on your shell that is now logged into the pi.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This will open up an ncurses GUI to configure the Pi&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;raspi-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Inside the GUI we’re going to make a few changes&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;System Options -&amp;gt; Password -&amp;gt; Configure a new password for the pi user&lt;/li&gt;
  &lt;li&gt;System Options -&amp;gt; Hostname -&amp;gt; Configure a new hostname for your pi (this was previously raspberrypi)&lt;/li&gt;
  &lt;li&gt;Localisation Options -&amp;gt; Customize all of these, so they suit your locale and keyboard type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/tutorials/starting_with_raspberry_pi/raspi_conf.png&quot; alt=&quot;Raspi-Conf&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that you set up the new hostname and password your next ssh session will require you to do&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh pi@newhostname
&lt;span class=&quot;c&quot;&gt;#Password is whatever you set it to&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclussion&quot;&gt;Conclussion&lt;/h1&gt;
&lt;p&gt;With all of that wrapped up and the configuration complete we’re all done :)
Congrats on setting up your Pi to work headless!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/tutorials/starting_with_raspberry_pi/pi_zero_w_picture.jpg&quot; alt=&quot;My Pi Zero W&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s one final tip I’ll leave you with, you should shutdown your Pi using the terminal rather than just unplugging it. This helps to prevent data corruption.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#This command will shut down the pi&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;shutdown now
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="tutorials" /><summary type="html"></summary></entry><entry><title type="html">Contribution Guide</title><link href="http://localhost:4000/tutorials/contribution_guide.html" rel="alternate" type="text/html" title="Contribution Guide" /><published>2021-04-22T22:41:46-04:00</published><updated>2021-04-22T22:41:46-04:00</updated><id>http://localhost:4000/tutorials/contribution_guide</id><content type="html" xml:base="http://localhost:4000/tutorials/contribution_guide.html">&lt;hr /&gt;
&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;hr /&gt;
&lt;p&gt;This site is based on GitHub Pages and Jekyll. You can use these to host a static site without ever touching html or css. Your posts are written in markdown(cheatsheet). Markdown is very simple to write basic posts in, and Jekyll handles the parsing of these files and creates a standard html and css based site for you.&lt;/p&gt;

&lt;p&gt;Jekyll is fairly simple to use once you have it set up. You’ll need a few things to get going.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linux (For Example: Ubuntu)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/documentation/installation/&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bundler.io/&quot;&gt;Bundler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don’t know how to use Linux here’s a &lt;a href=&quot;https://linuxjourney.com/&quot;&gt;great site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you don’t know git here’s a basic &lt;a href=&quot;https://git-scm.com/docs/gittutorial&quot;&gt;guide&lt;/a&gt;. I didn’t vet this thoroughly, but it
looks decent enough.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;To download the project simply run:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/UML-Embedded/uml-embedded.github.io.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;project-structure&quot;&gt;Project Structure&lt;/h1&gt;

&lt;hr /&gt;
&lt;p&gt;This tree shows you how the project is structured.&lt;/p&gt;

&lt;p&gt;uml-embedded&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;index.md&lt;/li&gt;
  &lt;li&gt;tutorials.md&lt;/li&gt;
  &lt;li&gt;blog.md&lt;/li&gt;
  &lt;li&gt;about.md&lt;/li&gt;
  &lt;li&gt;404.html&lt;/li&gt;
  &lt;li&gt;assets
    &lt;ul&gt;
      &lt;li&gt;images&lt;/li&gt;
      &lt;li&gt;posts
        &lt;ul&gt;
          &lt;li&gt;tutorials
            &lt;ul&gt;
              &lt;li&gt;tutorial_template
                &lt;ul&gt;
                  &lt;li&gt;tutorial_template_asset1.png&lt;/li&gt;
                  &lt;li&gt;tutorial_template_asset2.png&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;blogs&lt;/li&gt;
          &lt;li&gt;projects&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;_posts
    &lt;ul&gt;
      &lt;li&gt;2021-01-1-tutorial_template.md&lt;/li&gt;
      &lt;li&gt;2021-02-1-blog_template.md&lt;/li&gt;
      &lt;li&gt;2021-03-1-project_template.md&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;This is a pretty rough outline of the structure. Unless your editing one of the main tabs you only really need to focus on the posts, and assets folders. The assets folder will hold the images you need to include in your post. Sort it under the appropriate category(for example, tutorials) and label it as you see fit within that folder.&lt;/p&gt;

&lt;p&gt;Your post will go under the post folder will contain your post. The title of the post must follow the format shown. The date must be accurate, and you must use dashes as shown until you reach the post name. Within the post name please use underscores to separate words.&lt;/p&gt;

&lt;p&gt;As long as you fill out the header information for the post properly, Jekyll will autogenerate everything for you. Here is an example post for the tutorial template post shown above&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;example-post&quot;&gt;Example Post&lt;/h1&gt;

&lt;hr /&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Tutorial&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Template&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;post-title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Tutorial&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Template&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;2021-01-01 21:41:46 -0500&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/tutorials/tutorial_template.html&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;permalink_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/tutorial_template&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;detail_image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/assets/images/posts/tutorials/tutorial_template/tutorial_template_asset2.png&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tutorials&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tutorials&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;:)&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Tutorials&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;---
&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;# Body of your post goes here :)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Write all your stuff and things!
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Here!
&lt;span class=&quot;p&quot;&gt;![&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Images too!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;/assets/images/tutorial_template/tutorial_template_asset1.png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

Markdown can have embedded html too!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;going-through-the-example&quot;&gt;Going through the example&lt;/h1&gt;

&lt;hr /&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;layout: post
title:  &quot;Tutorial Template&quot;
post-title:  &quot;Tutorial Template&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The layout will always be post. Do not change this unless you know what you’re doing.&lt;/p&gt;

&lt;p&gt;The title is whatever you would like to call your post, and your post title will need to be the same.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;date:   2021-01-01 21:41:46 -0500
permalink: /tutorials/tutorial_template.html
permalink_name: /tutorial_template
detail_image: /assets/images/posts/tutorials/tutorial_template/tutorial_template_asset2.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The date must be accurate to when you write the post. If the date and time occurs in the future the post will not be generated by Jekyll until that time occurs. The permalink should go /category/post_title.html&lt;/p&gt;

&lt;p&gt;Categories&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;tutorials&lt;/li&gt;
  &lt;li&gt;blogs&lt;/li&gt;
  &lt;li&gt;projects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Post title will be the title you previously chose in lower case letters, seperated by underscores rather than spaces.&lt;/p&gt;

&lt;p&gt;The detail image will be pasted into the header page for each section. (ie: the tutorial page has a small clip of the image) and the post put the detail image at the top of the post itself. If you do not want a detail image simply delete the line.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;category: tutorials
description: &quot;Template for tutorials :)&quot;

&lt;span class=&quot;gh&quot;&gt;categories: tutorials
---
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;
---
&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;# Body of your post goes here :)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Category is the respective category of your post. The same categories as listed above.&lt;/p&gt;

&lt;p&gt;The first set of dashes closes of the header that jekyll uses, and the second set is a simple markdown horizontal rule. I like the look of it so keep it around please.&lt;/p&gt;

&lt;p&gt;Everything after this goes into the body of your post. You can write anything you want in markdown or html, and it will be generated by Jekyll into the main site.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;generating-the-site&quot;&gt;Generating the Site&lt;/h1&gt;

&lt;hr /&gt;
&lt;p&gt;After you’ve written the post you’ll need to generate the site, and you should see your new post added to the respective category. You’ll need to run a few commands in the terminal to do it&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;uml-embedded.github.io
bundle update
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That last command will host the site on a local server. The link will appear in the terminal after you enter it. Go ahead and look through the post to make sure it looks how you want, and when you’re satisfied, make a pull request.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;creating-a-pull-request-for-your-post&quot;&gt;Creating a Pull Request for Your Post&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;All you need to do is fork the repository, create a development branch, make your changes, push to your repo and then go on GitHub and generate a pull request.&lt;/p&gt;

&lt;p&gt;Here’s a good &lt;a href=&quot;https://opensource.com/article/19/7/create-pull-request-github&quot;&gt;guide&lt;/a&gt; on that.&lt;/p&gt;</content><author><name></name></author><category term="tutorials" /><summary type="html">Overview</summary></entry></feed>